title: Small tests
author: Joshua Thijssen <joshua@saffire-lang.org>

**********
import io from ::_sfl::io;
io.print("Let's go!");
=====
Let's go!
@@@@
import io as blaat from ::_sfl::io;
use ::_sfl::io as blaat;
use ::_sfl::io as io;
use ::_sfl::io as io2;
use io as blaat3;

io.print("foo");
blaat.print("bar");

::_sfl::io::io.print("baz");
::io::io.print("qux");
io::io.print("woq");
blaat::io.print("nef");
====
foo
bar
baz
qux
woq
nef
@@@@
import io from ::_sfl::io;

class foo {
    const PI = "I LIKE PIE!";

    public property a = 1234;

    public method __ctor() {
    }

    public method print() {
        io.print("We found the number: ");
        io.print(self.a);
        io.print("\n");
    }

    public method ::+(Numerical num) {
        self.a += num;
    }
}

// Print static properties
io.print(foo.PI);
io.print(foo.a.string());
====
I LIKE PIE!
1234
@@@@
import io from ::_sfl::io;

a = 14;
b = 9;
_sfl::io::io.print((a+b-1)*2);
====
44
@@@@
import io from ::_sfl::io;
import saffire from ::_sfl::saffire;

a = saffire.version();
io.print(a);
====
@@@@
import io from ::_sfl::io;

a = b = 5;

io.print(a);
io.print(b);

a = 10;
io.print(a);

a = 1;
a++;
a++;
io.print(a);


a = 1;
do {
  a = a + 1;
} while (a != 10);
io.print(a);

a = 12;
b = 10;
while (a == 1) {
  b = b + 1;
  a = a - 1;
} else {
  c = 123;
}
io.print(a);
io.print(b);
io.print(c);

b = 2;
c = b + 5;
io.print(c);

d = c * 2;
e = 10 / b;
f = 10 / 3;
g = 2 << 15;
io.print(d);
io.print(e);
io.print(f);
io.print(g);

a = true;
b = false;

a = b;

io.print(a);


a = 1;
b = a;
c = a;
d = c;

c = 2;

c = "blaat";
a = 2;
b = 2;

c = true;
d = false;
e = c;

io.print(e);
io.print(c);

f = g = h = a = 12;

if (b, a) {
    c = 123;
}
io.print(a);
io.print(b);
io.print(c);

if (a >= true) {
    c = 456;
}


a = 1;
if (a < 1) {
  b = 123;
} else {
  b = 456;
}

io.print(a);
io.print(b);

/*
a, b = 1, 2;
a, ,b = 1, 2, 3;
a, ,b = 1, , 3;
a, , ,b = 1, , , , , , 3;
,b = 1, 2, 3;
, ,b = 1, 2, 3;
, , ,b = 1, 2, 3;
a, = 1, 2, 3;
a, , = 1, 2, 3;
a, , , , , , , = 1, 2, 3, , ;

/*
use blaat;
use ::io as io;
use ::io as blaat;
use blaat as foo;
use blaat as foo2;
//use ::blaat::foo as blaat;

foo2::a = 1;
foo3::a = 1;

a = 1;
::b = 1;
::io.b = 1;
::blaat.b = 1;
::io.a = 1;

/*
::blaat::a = 1;

a = false;
a = 1;
b = a;
b = true;
c = 1;
b = a = c;
::b = a;
::io::b = a;
::saffire::c = false;
::saffire::c.string().print();
::b = 123;
b = 124;
::io::b = 2;

e = null;
a = e = e;

for (i=0; i!=10; i++) {
    i.print();
    if (i == 4) {
        "foobar!!!!!".print();
    }
}
/*
// b = notset;
//false = b;
//1 = b;
//::false::true::io.a = false;

/*
a = 1;
::a = 2;
::io::a = ::a;
::io::a = a;
::io::a.print();
/*
a = 1;
a;
a;
a;
a;
a;
a;
::a.print();
::a.print();
::a.print();
::a.print();
::a.print();
::io::a = 123;
::a.print();
::io::a.print();
a.print();
::a.print();
io::a.print();
io::a++;
io::a.print();
::io::a.print();
::io::a.print();
::io::a.print();
::io::a.print();
::io::a.print();
::io::a.print();
::io::a++;
::io::a.print();
::io::a--;
a = ::io::a;
a = false;

//a.destroy();

/*

::bar::a;
::a::b;            // We have to validate on correct namespace names (no , and not this,true,false,etc)
::false::b;
//::a::b;
a = "test";
//self.a();
::io.b = 123;
a = b;
a = ::b;
::a = io.b;

a = Foo();
::a = ::Foo();
a = ::bar::Foo();
::bar::a = ::bar.Foo();
foo.i;
a.b;
self.a;
parent.a;

"foo".print();
a.print();
io.print();
::a.print();
::io.print();
::io::console.print();

io.print(foo.i);
io.print(foo.PI);
io.print(a.PI);
io.print(a.b);
a.b = 1234;
::a.b = 1234;
::bar::a.b = 1234;
::foo::bar::a.b = 1234;
foo::bar::a.b = 1234;
::foo::bar::a.b = ::foo::bar.PI;
::foo::bar::a.b = ::foo::bar.a;
::foo::bar::a.b = ::foo::bar();
::foo::bar::a.b = foo::bar::io.print();

a = 1;
a.print();
a.neg();
a.print();
a.print().neg().print().abs().print();
::a.print().neg().print().abs().print();

a = 1;
::a = 1;
b = 2;
b++;
::b++;

a = ::a + ::b;
a = ::a + b + 1;

io.print();
io.print(foo.i);
io.print(foo.PI);
io.print(a.PI);
io.print(a.b);
a.b = 1234;
::a.b = 1234;
::bar::a.b = 1234;
::foo::bar::a.b = 1234;
foo::bar::a.b = 1234;
::foo::bar::a.b = ::foo::bar.PI;
::foo::bar::a.b = ::foo::bar.a;
::foo::bar::a.b = ::foo::bar();
::foo::bar::a.b = foo::bar::io.print();

::foo::a = b;
::foo::a.print();
::foo::io.print(::a);
::foo::io.print(::a);
::foo::bar::baz::print();
::foo::bar::baz::a();
io.print(::foo::bar::baz::a);

*/
