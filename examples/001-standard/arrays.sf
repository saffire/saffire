/*
 * Array examples
 */


// Everything is a class. No global functions, so print etc should be done
// through an I/O class. This could either be loaded explicitly or implicitly.
We prefer explicit, so "use io". Some classes like string, int etc should
// always be available and loaded implicitly.

use io;

$a = [ "1", 1, "4", 5.0 ];
$b = [ "a" => "1", "b" ];      // "a" => "1",  0 => "b"

$a.length()                     number of elements
    Return Integer     
    
$a.has( Object $key)            has $a got key $key
    Return Bool
    Note: This assumes all objects have a .hash() method         

$a.contains( String $key)       has $a got value $s?
    Return Bool                  

$a.remove( String $key)         remove item from the array as identified by the provided key
    Return self                 Provides fluent interface    
    Throws                      When $key does not exist
    
$a.insert( $value, [ String $key] )      Insert $value into array. If $key
                                                has not been given, $value.hash() will
                                                be used as key.
                                                
    Return self                 Provides fluent interface    
    Throws                      When $key already exists
    

static array.range( Int|String Start, Int|String Stop, [Int Step])
                                Create an array with values starting at Start, ending at Stop.
                                Increment with 1, unless step has been supplied. Step can for now
                                only be used in conjunction with integers.
    Return instance of Array

Choices:
- no shift, unshift, pop, push since it's an hash map, not an array
- no .json() method since it would require all values to have a .json() method as well



// See foreach.sf for more info on handling interatorable classes

foreach $a as value, key, meta {
    // $meta.index : how many have we done (0..length)
    if ($meta.index == 0) {
        io.print("This is the first");
    }

    // $meta.left : how many are left (length..0)
    if ($meta.left == 0) {
        io.print("This will be the last one");
    }

    io.printf("Key: %s   Val: %s\n", $key, $val);

    // meta object(immutable)
    //   meta.index   0-based index (int)
    //   meta.first   true when first element (bool)
    //   meta.last    true when last element (bool)
    //   meta.left    how many elements are left (if available) (int)
    //   meta.count   number of elements (if available!) (int)
    //   meta.key     key (mixed, or only string?)
    //   meta.value   value (mixed)
}





